(()=>{"use strict";var n={578:(n,t,e)=>{e.d(t,{Z:()=>o});var r=e(15),a=e.n(r),i=e(645),A=e.n(i)()(a());A.push([n.id,"* {\n    margin: 0px;\n    padding: 0px;\n}\nbody {\n    background-color: rgb(101, 186, 255);\n}\n.mainHeader {\n    text-align: center;\n    margin-top: 30px;\n    font-family: 'Bradley Hand', sans-serif;\n}\n.taskDisplay {\n    display: grid;\n    grid-template-columns: 1fr 2fr 1fr;\n    text-align: center;\n    margin-top: 30px;\n}\n.addTaskForm {\n    display: flex;\n    grid-column: 1;\n    height: 200px;\n    width: 250px;\n    margin-top: 50px;\n    margin-left: 40px;\n    margin-bottom: 30px;\n    flex-direction: column;\n    border: 2px solid rgb(0, 0, 0);\n    justify-self: right;\n    background-color: rgb(143, 143, 143);\n}\n\n/* Card to Add Task */ \n.addItemTitle {\n    margin: 20px;\n}\n.taskName {\n    margin: 15px 30px;\n    padding: 5px;\n}\n.submitCancelBtns {\n    display: flex;\n    justify-content: space-between;\n    margin: 0px 30px;\n}\n.submitTask, .cancelSubmit {\n    padding: 5px;\n}\n\n\n/* Task Display Area */ \n.taskList {\n    grid-column: 2;\n    text-align: center;\n    border: 2px solid rgb(0, 0, 0);\n    min-height: 415px;\n    height: fit-content;\n    width: 500px;\n    justify-self: right;\n    margin-left: 90px;\n    overflow: auto;\n    \n    background-color: rgb(218, 218, 218);\n}\n\n.taskCard {\n    display: flex;\n    justify-content: space-between;\n    margin: 20px;\n    list-style: none;\n}\n.deleteBtn {\n    height: 20px;\n    min-width: 50px;\n    margin-left: 50px;\n}\nfooter {\n    display: flex;\n    justify-content: center;\n    margin-top: 30px;\n}\n.copyRight {\n    margin-top: 7px;\n    margin-left: 30px;\n}\n\n@media(max-width: 400px) {\n    .mainHeader {\n        margin-left: 177px;\n        padding: 0px;\n        text-align: center;\n    }\n    .taskDisplay {\n        display: grid;\n        grid-template-columns: 1fr;\n    }\n    .addTaskForm {\n        justify-self: center;\n        margin: 0px 0px 20px 3%;\n    }\n    .taskList {\n        justify-self: center;\n        max-width: 70%;\n        margin: 0px 25% 0px 15%;\n    }\n    footer {\n        margin-left: 180px;\n    }\n    .gitHubLogo {\n        margin-top: 10px;\n    }\n}\n@media(min-width: 400px) {\n    .mainHeader {\n        margin-left: 110px ;\n        padding: 0px;\n        text-align: center;\n    }\n    .taskDisplay {\n        display: grid;\n        grid-template-columns: 1fr;\n    }\n    .addTaskForm {\n        justify-self: center;\n        margin: 0px 0px 20px 3%;\n    }\n    .taskList {\n        justify-self: center;\n        max-width: 70%;\n        margin: 0px 25% 0px 15%;\n    }\n    footer {\n        margin-left: 180px;\n    }\n    .gitHubLogo {\n        margin-top: 10px;\n    }\n}\n@media (min-width: 1000px) {\n    .mainHeader {\n        font-size: 45px;\n        margin: 100px 0px 50px 45px;\n    }\n    .taskDisplay {\n        display: grid;\n        grid-template-columns: 1fr;\n    }\n    .addTaskForm {\n        justify-self: center;\n        margin: 0px 0px 20px 3%;\n    }\n    .taskList {\n        justify-self: center;\n        max-width: 100%;\n        margin: 0px 40% 0px 26%;\n    }\n    footer {\n        margin-left: 0px;\n    }\n    .copyRight { \n        margin-top: 15px;\n    }\n}","",{version:3,sources:["webpack://./src/modules/CSS/style.css"],names:[],mappings:"AAAA;IACI,WAAW;IACX,YAAY;AAChB;AACA;IACI,oCAAoC;AACxC;AACA;IACI,kBAAkB;IAClB,gBAAgB;IAChB,uCAAuC;AAC3C;AACA;IACI,aAAa;IACb,kCAAkC;IAClC,kBAAkB;IAClB,gBAAgB;AACpB;AACA;IACI,aAAa;IACb,cAAc;IACd,aAAa;IACb,YAAY;IACZ,gBAAgB;IAChB,iBAAiB;IACjB,mBAAmB;IACnB,sBAAsB;IACtB,8BAA8B;IAC9B,mBAAmB;IACnB,oCAAoC;AACxC;;AAEA,qBAAqB;AACrB;IACI,YAAY;AAChB;AACA;IACI,iBAAiB;IACjB,YAAY;AAChB;AACA;IACI,aAAa;IACb,8BAA8B;IAC9B,gBAAgB;AACpB;AACA;IACI,YAAY;AAChB;;;AAGA,sBAAsB;AACtB;IACI,cAAc;IACd,kBAAkB;IAClB,8BAA8B;IAC9B,iBAAiB;IACjB,mBAAmB;IACnB,YAAY;IACZ,mBAAmB;IACnB,iBAAiB;IACjB,cAAc;;IAEd,oCAAoC;AACxC;;AAEA;IACI,aAAa;IACb,8BAA8B;IAC9B,YAAY;IACZ,gBAAgB;AACpB;AACA;IACI,YAAY;IACZ,eAAe;IACf,iBAAiB;AACrB;AACA;IACI,aAAa;IACb,uBAAuB;IACvB,gBAAgB;AACpB;AACA;IACI,eAAe;IACf,iBAAiB;AACrB;;AAEA;IACI;QACI,kBAAkB;QAClB,YAAY;QACZ,kBAAkB;IACtB;IACA;QACI,aAAa;QACb,0BAA0B;IAC9B;IACA;QACI,oBAAoB;QACpB,uBAAuB;IAC3B;IACA;QACI,oBAAoB;QACpB,cAAc;QACd,uBAAuB;IAC3B;IACA;QACI,kBAAkB;IACtB;IACA;QACI,gBAAgB;IACpB;AACJ;AACA;IACI;QACI,mBAAmB;QACnB,YAAY;QACZ,kBAAkB;IACtB;IACA;QACI,aAAa;QACb,0BAA0B;IAC9B;IACA;QACI,oBAAoB;QACpB,uBAAuB;IAC3B;IACA;QACI,oBAAoB;QACpB,cAAc;QACd,uBAAuB;IAC3B;IACA;QACI,kBAAkB;IACtB;IACA;QACI,gBAAgB;IACpB;AACJ;AACA;IACI;QACI,eAAe;QACf,2BAA2B;IAC/B;IACA;QACI,aAAa;QACb,0BAA0B;IAC9B;IACA;QACI,oBAAoB;QACpB,uBAAuB;IAC3B;IACA;QACI,oBAAoB;QACpB,eAAe;QACf,uBAAuB;IAC3B;IACA;QACI,gBAAgB;IACpB;IACA;QACI,gBAAgB;IACpB;AACJ",sourcesContent:["* {\n    margin: 0px;\n    padding: 0px;\n}\nbody {\n    background-color: rgb(101, 186, 255);\n}\n.mainHeader {\n    text-align: center;\n    margin-top: 30px;\n    font-family: 'Bradley Hand', sans-serif;\n}\n.taskDisplay {\n    display: grid;\n    grid-template-columns: 1fr 2fr 1fr;\n    text-align: center;\n    margin-top: 30px;\n}\n.addTaskForm {\n    display: flex;\n    grid-column: 1;\n    height: 200px;\n    width: 250px;\n    margin-top: 50px;\n    margin-left: 40px;\n    margin-bottom: 30px;\n    flex-direction: column;\n    border: 2px solid rgb(0, 0, 0);\n    justify-self: right;\n    background-color: rgb(143, 143, 143);\n}\n\n/* Card to Add Task */ \n.addItemTitle {\n    margin: 20px;\n}\n.taskName {\n    margin: 15px 30px;\n    padding: 5px;\n}\n.submitCancelBtns {\n    display: flex;\n    justify-content: space-between;\n    margin: 0px 30px;\n}\n.submitTask, .cancelSubmit {\n    padding: 5px;\n}\n\n\n/* Task Display Area */ \n.taskList {\n    grid-column: 2;\n    text-align: center;\n    border: 2px solid rgb(0, 0, 0);\n    min-height: 415px;\n    height: fit-content;\n    width: 500px;\n    justify-self: right;\n    margin-left: 90px;\n    overflow: auto;\n    \n    background-color: rgb(218, 218, 218);\n}\n\n.taskCard {\n    display: flex;\n    justify-content: space-between;\n    margin: 20px;\n    list-style: none;\n}\n.deleteBtn {\n    height: 20px;\n    min-width: 50px;\n    margin-left: 50px;\n}\nfooter {\n    display: flex;\n    justify-content: center;\n    margin-top: 30px;\n}\n.copyRight {\n    margin-top: 7px;\n    margin-left: 30px;\n}\n\n@media(max-width: 400px) {\n    .mainHeader {\n        margin-left: 177px;\n        padding: 0px;\n        text-align: center;\n    }\n    .taskDisplay {\n        display: grid;\n        grid-template-columns: 1fr;\n    }\n    .addTaskForm {\n        justify-self: center;\n        margin: 0px 0px 20px 3%;\n    }\n    .taskList {\n        justify-self: center;\n        max-width: 70%;\n        margin: 0px 25% 0px 15%;\n    }\n    footer {\n        margin-left: 180px;\n    }\n    .gitHubLogo {\n        margin-top: 10px;\n    }\n}\n@media(min-width: 400px) {\n    .mainHeader {\n        margin-left: 110px ;\n        padding: 0px;\n        text-align: center;\n    }\n    .taskDisplay {\n        display: grid;\n        grid-template-columns: 1fr;\n    }\n    .addTaskForm {\n        justify-self: center;\n        margin: 0px 0px 20px 3%;\n    }\n    .taskList {\n        justify-self: center;\n        max-width: 70%;\n        margin: 0px 25% 0px 15%;\n    }\n    footer {\n        margin-left: 180px;\n    }\n    .gitHubLogo {\n        margin-top: 10px;\n    }\n}\n@media (min-width: 1000px) {\n    .mainHeader {\n        font-size: 45px;\n        margin: 100px 0px 50px 45px;\n    }\n    .taskDisplay {\n        display: grid;\n        grid-template-columns: 1fr;\n    }\n    .addTaskForm {\n        justify-self: center;\n        margin: 0px 0px 20px 3%;\n    }\n    .taskList {\n        justify-self: center;\n        max-width: 100%;\n        margin: 0px 40% 0px 26%;\n    }\n    footer {\n        margin-left: 0px;\n    }\n    .copyRight { \n        margin-top: 15px;\n    }\n}"],sourceRoot:""}]);const o=A},645:n=>{n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e=n(t);return t[2]?"@media ".concat(t[2]," {").concat(e,"}"):e})).join("")},t.i=function(n,e,r){"string"==typeof n&&(n=[[null,n,""]]);var a={};if(r)for(var i=0;i<this.length;i++){var A=this[i][0];null!=A&&(a[A]=!0)}for(var o=0;o<n.length;o++){var s=[].concat(n[o]);r&&a[s[0]]||(e&&(s[2]?s[2]="".concat(e," and ").concat(s[2]):s[2]=e),t.push(s))}},t}},15:n=>{function t(n,t){(null==t||t>n.length)&&(t=n.length);for(var e=0,r=new Array(t);e<t;e++)r[e]=n[e];return r}n.exports=function(n){var e,r,a=(r=4,function(n){if(Array.isArray(n))return n}(e=n)||function(n,t){var e=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=e){var r,a,i=[],A=!0,o=!1;try{for(e=e.call(n);!(A=(r=e.next()).done)&&(i.push(r.value),!t||i.length!==t);A=!0);}catch(n){o=!0,a=n}finally{try{A||null==e.return||e.return()}finally{if(o)throw a}}return i}}(e,r)||function(n,e){if(n){if("string"==typeof n)return t(n,e);var r=Object.prototype.toString.call(n).slice(8,-1);return"Object"===r&&n.constructor&&(r=n.constructor.name),"Map"===r||"Set"===r?Array.from(n):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?t(n,e):void 0}}(e,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=a[1],A=a[3];if(!A)return i;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(A)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),p="/*# ".concat(s," */"),l=A.sources.map((function(n){return"/*# sourceURL=".concat(A.sourceRoot||"").concat(n," */")}));return[i].concat(l).concat([p]).join("\n")}return[i].join("\n")}},379:n=>{var t=[];function e(n){for(var e=-1,r=0;r<t.length;r++)if(t[r].identifier===n){e=r;break}return e}function r(n,r){for(var i={},A=[],o=0;o<n.length;o++){var s=n[o],p=r.base?s[0]+r.base:s[0],l=i[p]||0,d="".concat(p," ").concat(l);i[p]=l+1;var c=e(d),m={css:s[1],media:s[2],sourceMap:s[3]};-1!==c?(t[c].references++,t[c].updater(m)):t.push({identifier:d,updater:a(m,r),references:1}),A.push(d)}return A}function a(n,t){var e=t.domAPI(t);return e.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap)return;e.update(n=t)}else e.remove()}}n.exports=function(n,a){var i=r(n=n||[],a=a||{});return function(n){n=n||[];for(var A=0;A<i.length;A++){var o=e(i[A]);t[o].references--}for(var s=r(n,a),p=0;p<i.length;p++){var l=e(i[p]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}i=s}}},569:n=>{var t={};n.exports=function(n,e){var r=function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}},216:n=>{n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t),t}},565:(n,t,e)=>{n.exports=function(n){var t=e.nc;t&&n.setAttribute("nonce",t)}},795:n=>{n.exports=function(n){var t=n.insertStyleElement(n);return{update:function(e){!function(n,t,e){var r=e.css,a=e.media,i=e.sourceMap;a?n.setAttribute("media",a):n.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,n)}(t,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},589:n=>{n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}}},t={};function e(r){var a=t[r];if(void 0!==a)return a.exports;var i=t[r]={id:r,exports:{}};return n[r](i,i.exports,e),i.exports}e.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},e.d=(n,t)=>{for(var r in t)e.o(t,r)&&!e.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:t[r]})},e.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),(()=>{var n=e(379),t=e.n(n),r=e(795),a=e.n(r),i=e(569),A=e.n(i),o=e(565),s=e.n(o),p=e(216),l=e.n(p),d=e(589),c=e.n(d),m=e(578),u={};u.styleTagTransform=c(),u.setAttributes=s(),u.insert=A().bind(null,"head"),u.domAPI=a(),u.insertStyleElement=l(),t()(m.Z,u),m.Z&&m.Z.locals&&m.Z.locals;class g{constructor(n,t,e,r){this.name=n,this.description=t,this.dueDate=e,this.priority=r}setName(n){this.name=n}getName(){return this.name}setDescription(n){this.description=n}getDescription(){return this.description}}let C=document.querySelector(".taskList");C=document.querySelector(".taskList"),window.addEventListener("load",(()=>{Object.keys(localStorage).forEach((n=>{let t=document.createElement("div");t.classList.add("taskCard");let e=document.createElement("li");e.classList.add("name"),e.textContent=localStorage[n];let r=document.createElement("button");r.classList.add("deleteBtn"),r.textContent="X",r.addEventListener("click",(()=>{localStorage.removeItem(n),t.style.display="None"})),t.append(e),t.append(r),C.append(t)}))}));class f{constructor(n,t){this.project=n,this.projectArr=t}addTask(){document.querySelector(".submitTask").addEventListener("click",(()=>{let n=new g,t=document.querySelector(".taskName");n.setName(t.value),localStorage.setItem(`${n.name}`,`${n.name}`);let e=document.createElement("div");e.classList.add("taskCard");let r=document.createElement("li");r.classList.add("name"),r.textContent=n.name;let a=document.createElement("button");a.classList.add("deleteBtn"),a.textContent="X",e.append(localStorage.getItem(n.name)),e.append(a),C.append(e),a.addEventListener("click",(()=>{localStorage.removeItem(n.name),e.style.display="None"})),t.value=""}))}}(new f).addTask(),document.addEventListener("DOMContentLoaded",f)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,