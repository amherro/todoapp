(()=>{"use strict";var n={578:(n,e,t)=>{t.d(e,{Z:()=>A});var r=t(15),a=t.n(r),i=t(645),o=t.n(i)()(a());o.push([n.id,"* {\n    margin: 0px;\n    padding: 0px;\n}\nbody {\n    background-color: rgb(101, 186, 255);\n}\n.mainHeader {\n    text-align: center;\n    margin-top: 30px;\n    font-size: 45px;\n    font-family: 'Bradley Hand', sans-serif;\n}\n.taskDisplay {\n    display: grid;\n    grid-template-columns: 1fr 2fr 1fr;\n    text-align: center;\n    margin-top: 30px;\n}\n.addTaskForm {\n    display: flex;\n    grid-column: 1;\n    height: 200px;\n    width: 250px;\n    margin-top: 50px;\n    margin-left: 40px;\n    margin-bottom: 30px;\n    flex-direction: column;\n    border: 2px solid rgb(0, 0, 0);\n    justify-self: right;\n    background-color: rgb(143, 143, 143);\n}\n\n/* Card to Add Task */ \n.addItemTitle {\n    margin: 20px;\n}\n.taskName {\n    margin: 15px 30px;\n    padding: 5px;\n}\n.submitCancelBtns {\n    display: flex;\n    justify-content: space-between;\n    margin: 0px 30px;\n}\n.submitTask, .cancelSubmit {\n    padding: 5px;\n}\n\n\n/* Task Display Area */ \n.taskList {\n    grid-column: 2;\n    text-align: center;\n    border: 2px solid rgb(0, 0, 0);\n    min-height: 415px;\n    height: fit-content;\n    width: 500px;\n    justify-self: right;\n    margin-left: 90px;\n    overflow: auto;\n    \n    background-color: rgb(218, 218, 218);\n}\n\n.taskCard {\n    display: flex;\n    justify-content: space-between;\n    margin: 20px;\n    list-style: none;\n}\n.deleteBtn {\n    height: 20px;\n    min-width: 50px;\n    margin-left: 50px;\n}\nfooter {\n    display: flex;\n    justify-content: center;\n    margin-top: 30px;\n}\n.copyRight {\n    margin-top: 7px;\n    margin-left: 30px;\n}\n\n@media(max-width: 1000px) {\n    .mainHeader {\n        margin-left: 20%;\n        padding: 0px;\n        text-align: center;\n        font-size: 20px;\n    }\n    .taskDisplay {\n        display: grid;\n        grid-template-columns: 1fr;\n    }\n    .addTaskForm {\n        justify-self: center;\n        margin: 0px 0px 20px 3%;\n    }\n    .taskList {\n        justify-self: center;\n        max-width: 70%;\n        margin: 0px 25% 0px 15%;\n    }\n    footer {\n        margin-left: 20%;\n    }\n    .gitHubLogo {\n        margin-top: 0px;\n    }\n}\n\n","",{version:3,sources:["webpack://./src/modules/CSS/style.css"],names:[],mappings:"AAAA;IACI,WAAW;IACX,YAAY;AAChB;AACA;IACI,oCAAoC;AACxC;AACA;IACI,kBAAkB;IAClB,gBAAgB;IAChB,eAAe;IACf,uCAAuC;AAC3C;AACA;IACI,aAAa;IACb,kCAAkC;IAClC,kBAAkB;IAClB,gBAAgB;AACpB;AACA;IACI,aAAa;IACb,cAAc;IACd,aAAa;IACb,YAAY;IACZ,gBAAgB;IAChB,iBAAiB;IACjB,mBAAmB;IACnB,sBAAsB;IACtB,8BAA8B;IAC9B,mBAAmB;IACnB,oCAAoC;AACxC;;AAEA,qBAAqB;AACrB;IACI,YAAY;AAChB;AACA;IACI,iBAAiB;IACjB,YAAY;AAChB;AACA;IACI,aAAa;IACb,8BAA8B;IAC9B,gBAAgB;AACpB;AACA;IACI,YAAY;AAChB;;;AAGA,sBAAsB;AACtB;IACI,cAAc;IACd,kBAAkB;IAClB,8BAA8B;IAC9B,iBAAiB;IACjB,mBAAmB;IACnB,YAAY;IACZ,mBAAmB;IACnB,iBAAiB;IACjB,cAAc;;IAEd,oCAAoC;AACxC;;AAEA;IACI,aAAa;IACb,8BAA8B;IAC9B,YAAY;IACZ,gBAAgB;AACpB;AACA;IACI,YAAY;IACZ,eAAe;IACf,iBAAiB;AACrB;AACA;IACI,aAAa;IACb,uBAAuB;IACvB,gBAAgB;AACpB;AACA;IACI,eAAe;IACf,iBAAiB;AACrB;;AAEA;IACI;QACI,gBAAgB;QAChB,YAAY;QACZ,kBAAkB;QAClB,eAAe;IACnB;IACA;QACI,aAAa;QACb,0BAA0B;IAC9B;IACA;QACI,oBAAoB;QACpB,uBAAuB;IAC3B;IACA;QACI,oBAAoB;QACpB,cAAc;QACd,uBAAuB;IAC3B;IACA;QACI,gBAAgB;IACpB;IACA;QACI,eAAe;IACnB;AACJ",sourcesContent:["* {\n    margin: 0px;\n    padding: 0px;\n}\nbody {\n    background-color: rgb(101, 186, 255);\n}\n.mainHeader {\n    text-align: center;\n    margin-top: 30px;\n    font-size: 45px;\n    font-family: 'Bradley Hand', sans-serif;\n}\n.taskDisplay {\n    display: grid;\n    grid-template-columns: 1fr 2fr 1fr;\n    text-align: center;\n    margin-top: 30px;\n}\n.addTaskForm {\n    display: flex;\n    grid-column: 1;\n    height: 200px;\n    width: 250px;\n    margin-top: 50px;\n    margin-left: 40px;\n    margin-bottom: 30px;\n    flex-direction: column;\n    border: 2px solid rgb(0, 0, 0);\n    justify-self: right;\n    background-color: rgb(143, 143, 143);\n}\n\n/* Card to Add Task */ \n.addItemTitle {\n    margin: 20px;\n}\n.taskName {\n    margin: 15px 30px;\n    padding: 5px;\n}\n.submitCancelBtns {\n    display: flex;\n    justify-content: space-between;\n    margin: 0px 30px;\n}\n.submitTask, .cancelSubmit {\n    padding: 5px;\n}\n\n\n/* Task Display Area */ \n.taskList {\n    grid-column: 2;\n    text-align: center;\n    border: 2px solid rgb(0, 0, 0);\n    min-height: 415px;\n    height: fit-content;\n    width: 500px;\n    justify-self: right;\n    margin-left: 90px;\n    overflow: auto;\n    \n    background-color: rgb(218, 218, 218);\n}\n\n.taskCard {\n    display: flex;\n    justify-content: space-between;\n    margin: 20px;\n    list-style: none;\n}\n.deleteBtn {\n    height: 20px;\n    min-width: 50px;\n    margin-left: 50px;\n}\nfooter {\n    display: flex;\n    justify-content: center;\n    margin-top: 30px;\n}\n.copyRight {\n    margin-top: 7px;\n    margin-left: 30px;\n}\n\n@media(max-width: 1000px) {\n    .mainHeader {\n        margin-left: 20%;\n        padding: 0px;\n        text-align: center;\n        font-size: 20px;\n    }\n    .taskDisplay {\n        display: grid;\n        grid-template-columns: 1fr;\n    }\n    .addTaskForm {\n        justify-self: center;\n        margin: 0px 0px 20px 3%;\n    }\n    .taskList {\n        justify-self: center;\n        max-width: 70%;\n        margin: 0px 25% 0px 15%;\n    }\n    footer {\n        margin-left: 20%;\n    }\n    .gitHubLogo {\n        margin-top: 0px;\n    }\n}\n\n"],sourceRoot:""}]);const A=o},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t=n(e);return e[2]?"@media ".concat(e[2]," {").concat(t,"}"):t})).join("")},e.i=function(n,t,r){"string"==typeof n&&(n=[[null,n,""]]);var a={};if(r)for(var i=0;i<this.length;i++){var o=this[i][0];null!=o&&(a[o]=!0)}for(var A=0;A<n.length;A++){var s=[].concat(n[A]);r&&a[s[0]]||(t&&(s[2]?s[2]="".concat(t," and ").concat(s[2]):s[2]=t),e.push(s))}},e}},15:n=>{function e(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,r=new Array(e);t<e;t++)r[t]=n[t];return r}n.exports=function(n){var t,r,a=(r=4,function(n){if(Array.isArray(n))return n}(t=n)||function(n,e){var t=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=t){var r,a,i=[],o=!0,A=!1;try{for(t=t.call(n);!(o=(r=t.next()).done)&&(i.push(r.value),!e||i.length!==e);o=!0);}catch(n){A=!0,a=n}finally{try{o||null==t.return||t.return()}finally{if(A)throw a}}return i}}(t,r)||function(n,t){if(n){if("string"==typeof n)return e(n,t);var r=Object.prototype.toString.call(n).slice(8,-1);return"Object"===r&&n.constructor&&(r=n.constructor.name),"Map"===r||"Set"===r?Array.from(n):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?e(n,t):void 0}}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=a[1],o=a[3];if(!o)return i;if("function"==typeof btoa){var A=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(A),l="/*# ".concat(s," */"),c=o.sources.map((function(n){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(n," */")}));return[i].concat(c).concat([l]).join("\n")}return[i].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var i={},o=[],A=0;A<n.length;A++){var s=n[A],l=r.base?s[0]+r.base:s[0],c=i[l]||0,d="".concat(l," ").concat(c);i[l]=c+1;var p=t(d),u={css:s[1],media:s[2],sourceMap:s[3]};-1!==p?(e[p].references++,e[p].updater(u)):e.push({identifier:d,updater:a(u,r),references:1}),o.push(d)}return o}function a(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;t.update(n=e)}else t.remove()}}n.exports=function(n,a){var i=r(n=n||[],a=a||{});return function(n){n=n||[];for(var o=0;o<i.length;o++){var A=t(i[o]);e[A].references--}for(var s=r(n,a),l=0;l<i.length;l++){var c=t(i[l]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}i=s}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r=t.css,a=t.media,i=t.sourceMap;a?n.setAttribute("media",a):n.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(r,n)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var a=e[r];if(void 0!==a)return a.exports;var i=e[r]={id:r,exports:{}};return n[r](i,i.exports,t),i.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.r=n=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},(()=>{var n={};t.r(n);var e=t(379),r=t.n(e),a=t(795),i=t.n(a),o=t(569),A=t.n(o),s=t(565),l=t.n(s),c=t(216),d=t.n(c),p=t(589),u=t.n(p),m=t(578),f={};f.styleTagTransform=u(),f.setAttributes=l(),f.insert=A().bind(null,"head"),f.domAPI=i(),f.insertStyleElement=d(),r()(m.Z,f),m.Z&&m.Z.locals&&m.Z.locals;class g{constructor(n,e,t,r){this.name=n,this.description=e,this.dueDate=t,this.priority=r}setName(n){this.name=n}getName(){return this.name}setDescription(n){this.description=n}getDescription(){return this.description}}let C=document.querySelector(".taskList");C=document.querySelector(".taskList"),window.addEventListener("load",(()=>{Object.keys(localStorage).forEach((n=>{let e=document.createElement("div");e.classList.add("taskCard");let t=document.createElement("li");t.classList.add("name"),t.textContent=localStorage[n];let r=document.createElement("button");r.classList.add("deleteBtn"),r.textContent="X",r.addEventListener("click",(()=>{localStorage.removeItem(n),e.style.display="None"})),e.append(t),e.append(r),C.append(e)}))})),(new class{constructor(n,e){this.project=n,this.projectArr=e}addTask(){document.querySelector(".submitTask").addEventListener("click",(()=>{let n=new g,e=document.querySelector(".taskName");n.setName(e.value),localStorage.setItem(`${n.name}`,`${n.name}`);let t=document.createElement("div");t.classList.add("taskCard");let r=document.createElement("li");r.classList.add("name"),r.textContent=n.name;let a=document.createElement("button");a.classList.add("deleteBtn"),a.textContent="X",t.append(localStorage.getItem(n.name)),t.append(a),C.append(t),a.addEventListener("click",(()=>{localStorage.removeItem(n.name),t.style.display="None"})),e.value=""}))}}).addTask(),(0,n.default)()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Y3NzIiwid2VicGFjazovL3RvLWRvLWFwcC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vdG8tZG8tYXBwLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vdG8tZG8tYXBwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL3RvLWRvLWFwcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vdG8tZG8tYXBwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL3RvLWRvLWFwcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly90by1kby1hcHAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly90by1kby1hcHAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly90by1kby1hcHAvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vdG8tZG8tYXBwL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3RvLWRvLWFwcC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vdG8tZG8tYXBwL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vdG8tZG8tYXBwL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vdG8tZG8tYXBwLy4vc3JjL21vZHVsZXMvQ1NTL3N0eWxlLmNzcz82YzRjIiwid2VicGFjazovL3RvLWRvLWFwcC8uL3NyYy9tb2R1bGVzL3RvX2RvLmpzIiwid2VicGFjazovL3RvLWRvLWFwcC8uL3NyYy9tb2R1bGVzL1VJLmpzIiwid2VicGFjazovL3RvLWRvLWFwcC8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIioge1xcbiAgICBtYXJnaW46IDBweDtcXG4gICAgcGFkZGluZzogMHB4O1xcbn1cXG5ib2R5IHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDEwMSwgMTg2LCAyNTUpO1xcbn1cXG4ubWFpbkhlYWRlciB7XFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gICAgbWFyZ2luLXRvcDogMzBweDtcXG4gICAgZm9udC1zaXplOiA0NXB4O1xcbiAgICBmb250LWZhbWlseTogJ0JyYWRsZXkgSGFuZCcsIHNhbnMtc2VyaWY7XFxufVxcbi50YXNrRGlzcGxheSB7XFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIDJmciAxZnI7XFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gICAgbWFyZ2luLXRvcDogMzBweDtcXG59XFxuLmFkZFRhc2tGb3JtIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZ3JpZC1jb2x1bW46IDE7XFxuICAgIGhlaWdodDogMjAwcHg7XFxuICAgIHdpZHRoOiAyNTBweDtcXG4gICAgbWFyZ2luLXRvcDogNTBweDtcXG4gICAgbWFyZ2luLWxlZnQ6IDQwcHg7XFxuICAgIG1hcmdpbi1ib3R0b206IDMwcHg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgIGJvcmRlcjogMnB4IHNvbGlkIHJnYigwLCAwLCAwKTtcXG4gICAganVzdGlmeS1zZWxmOiByaWdodDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDE0MywgMTQzLCAxNDMpO1xcbn1cXG5cXG4vKiBDYXJkIHRvIEFkZCBUYXNrICovIFxcbi5hZGRJdGVtVGl0bGUge1xcbiAgICBtYXJnaW46IDIwcHg7XFxufVxcbi50YXNrTmFtZSB7XFxuICAgIG1hcmdpbjogMTVweCAzMHB4O1xcbiAgICBwYWRkaW5nOiA1cHg7XFxufVxcbi5zdWJtaXRDYW5jZWxCdG5zIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgICBtYXJnaW46IDBweCAzMHB4O1xcbn1cXG4uc3VibWl0VGFzaywgLmNhbmNlbFN1Ym1pdCB7XFxuICAgIHBhZGRpbmc6IDVweDtcXG59XFxuXFxuXFxuLyogVGFzayBEaXNwbGF5IEFyZWEgKi8gXFxuLnRhc2tMaXN0IHtcXG4gICAgZ3JpZC1jb2x1bW46IDI7XFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gICAgYm9yZGVyOiAycHggc29saWQgcmdiKDAsIDAsIDApO1xcbiAgICBtaW4taGVpZ2h0OiA0MTVweDtcXG4gICAgaGVpZ2h0OiBmaXQtY29udGVudDtcXG4gICAgd2lkdGg6IDUwMHB4O1xcbiAgICBqdXN0aWZ5LXNlbGY6IHJpZ2h0O1xcbiAgICBtYXJnaW4tbGVmdDogOTBweDtcXG4gICAgb3ZlcmZsb3c6IGF1dG87XFxuICAgIFxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjE4LCAyMTgsIDIxOCk7XFxufVxcblxcbi50YXNrQ2FyZCB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG4gICAgbWFyZ2luOiAyMHB4O1xcbiAgICBsaXN0LXN0eWxlOiBub25lO1xcbn1cXG4uZGVsZXRlQnRuIHtcXG4gICAgaGVpZ2h0OiAyMHB4O1xcbiAgICBtaW4td2lkdGg6IDUwcHg7XFxuICAgIG1hcmdpbi1sZWZ0OiA1MHB4O1xcbn1cXG5mb290ZXIge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgbWFyZ2luLXRvcDogMzBweDtcXG59XFxuLmNvcHlSaWdodCB7XFxuICAgIG1hcmdpbi10b3A6IDdweDtcXG4gICAgbWFyZ2luLWxlZnQ6IDMwcHg7XFxufVxcblxcbkBtZWRpYShtYXgtd2lkdGg6IDEwMDBweCkge1xcbiAgICAubWFpbkhlYWRlciB7XFxuICAgICAgICBtYXJnaW4tbGVmdDogMjAlO1xcbiAgICAgICAgcGFkZGluZzogMHB4O1xcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgICAgICAgZm9udC1zaXplOiAyMHB4O1xcbiAgICB9XFxuICAgIC50YXNrRGlzcGxheSB7XFxuICAgICAgICBkaXNwbGF5OiBncmlkO1xcbiAgICAgICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnI7XFxuICAgIH1cXG4gICAgLmFkZFRhc2tGb3JtIHtcXG4gICAgICAgIGp1c3RpZnktc2VsZjogY2VudGVyO1xcbiAgICAgICAgbWFyZ2luOiAwcHggMHB4IDIwcHggMyU7XFxuICAgIH1cXG4gICAgLnRhc2tMaXN0IHtcXG4gICAgICAgIGp1c3RpZnktc2VsZjogY2VudGVyO1xcbiAgICAgICAgbWF4LXdpZHRoOiA3MCU7XFxuICAgICAgICBtYXJnaW46IDBweCAyNSUgMHB4IDE1JTtcXG4gICAgfVxcbiAgICBmb290ZXIge1xcbiAgICAgICAgbWFyZ2luLWxlZnQ6IDIwJTtcXG4gICAgfVxcbiAgICAuZ2l0SHViTG9nbyB7XFxuICAgICAgICBtYXJnaW4tdG9wOiAwcHg7XFxuICAgIH1cXG59XFxuXFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL21vZHVsZXMvQ1NTL3N0eWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtJQUNJLFdBQVc7SUFDWCxZQUFZO0FBQ2hCO0FBQ0E7SUFDSSxvQ0FBb0M7QUFDeEM7QUFDQTtJQUNJLGtCQUFrQjtJQUNsQixnQkFBZ0I7SUFDaEIsZUFBZTtJQUNmLHVDQUF1QztBQUMzQztBQUNBO0lBQ0ksYUFBYTtJQUNiLGtDQUFrQztJQUNsQyxrQkFBa0I7SUFDbEIsZ0JBQWdCO0FBQ3BCO0FBQ0E7SUFDSSxhQUFhO0lBQ2IsY0FBYztJQUNkLGFBQWE7SUFDYixZQUFZO0lBQ1osZ0JBQWdCO0lBQ2hCLGlCQUFpQjtJQUNqQixtQkFBbUI7SUFDbkIsc0JBQXNCO0lBQ3RCLDhCQUE4QjtJQUM5QixtQkFBbUI7SUFDbkIsb0NBQW9DO0FBQ3hDOztBQUVBLHFCQUFxQjtBQUNyQjtJQUNJLFlBQVk7QUFDaEI7QUFDQTtJQUNJLGlCQUFpQjtJQUNqQixZQUFZO0FBQ2hCO0FBQ0E7SUFDSSxhQUFhO0lBQ2IsOEJBQThCO0lBQzlCLGdCQUFnQjtBQUNwQjtBQUNBO0lBQ0ksWUFBWTtBQUNoQjs7O0FBR0Esc0JBQXNCO0FBQ3RCO0lBQ0ksY0FBYztJQUNkLGtCQUFrQjtJQUNsQiw4QkFBOEI7SUFDOUIsaUJBQWlCO0lBQ2pCLG1CQUFtQjtJQUNuQixZQUFZO0lBQ1osbUJBQW1CO0lBQ25CLGlCQUFpQjtJQUNqQixjQUFjOztJQUVkLG9DQUFvQztBQUN4Qzs7QUFFQTtJQUNJLGFBQWE7SUFDYiw4QkFBOEI7SUFDOUIsWUFBWTtJQUNaLGdCQUFnQjtBQUNwQjtBQUNBO0lBQ0ksWUFBWTtJQUNaLGVBQWU7SUFDZixpQkFBaUI7QUFDckI7QUFDQTtJQUNJLGFBQWE7SUFDYix1QkFBdUI7SUFDdkIsZ0JBQWdCO0FBQ3BCO0FBQ0E7SUFDSSxlQUFlO0lBQ2YsaUJBQWlCO0FBQ3JCOztBQUVBO0lBQ0k7UUFDSSxnQkFBZ0I7UUFDaEIsWUFBWTtRQUNaLGtCQUFrQjtRQUNsQixlQUFlO0lBQ25CO0lBQ0E7UUFDSSxhQUFhO1FBQ2IsMEJBQTBCO0lBQzlCO0lBQ0E7UUFDSSxvQkFBb0I7UUFDcEIsdUJBQXVCO0lBQzNCO0lBQ0E7UUFDSSxvQkFBb0I7UUFDcEIsY0FBYztRQUNkLHVCQUF1QjtJQUMzQjtJQUNBO1FBQ0ksZ0JBQWdCO0lBQ3BCO0lBQ0E7UUFDSSxlQUFlO0lBQ25CO0FBQ0pcIixcInNvdXJjZXNDb250ZW50XCI6W1wiKiB7XFxuICAgIG1hcmdpbjogMHB4O1xcbiAgICBwYWRkaW5nOiAwcHg7XFxufVxcbmJvZHkge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTAxLCAxODYsIDI1NSk7XFxufVxcbi5tYWluSGVhZGVyIHtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgICBtYXJnaW4tdG9wOiAzMHB4O1xcbiAgICBmb250LXNpemU6IDQ1cHg7XFxuICAgIGZvbnQtZmFtaWx5OiAnQnJhZGxleSBIYW5kJywgc2Fucy1zZXJpZjtcXG59XFxuLnRhc2tEaXNwbGF5IHtcXG4gICAgZGlzcGxheTogZ3JpZDtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnIgMmZyIDFmcjtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgICBtYXJnaW4tdG9wOiAzMHB4O1xcbn1cXG4uYWRkVGFza0Zvcm0ge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBncmlkLWNvbHVtbjogMTtcXG4gICAgaGVpZ2h0OiAyMDBweDtcXG4gICAgd2lkdGg6IDI1MHB4O1xcbiAgICBtYXJnaW4tdG9wOiA1MHB4O1xcbiAgICBtYXJnaW4tbGVmdDogNDBweDtcXG4gICAgbWFyZ2luLWJvdHRvbTogMzBweDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgYm9yZGVyOiAycHggc29saWQgcmdiKDAsIDAsIDApO1xcbiAgICBqdXN0aWZ5LXNlbGY6IHJpZ2h0O1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTQzLCAxNDMsIDE0Myk7XFxufVxcblxcbi8qIENhcmQgdG8gQWRkIFRhc2sgKi8gXFxuLmFkZEl0ZW1UaXRsZSB7XFxuICAgIG1hcmdpbjogMjBweDtcXG59XFxuLnRhc2tOYW1lIHtcXG4gICAgbWFyZ2luOiAxNXB4IDMwcHg7XFxuICAgIHBhZGRpbmc6IDVweDtcXG59XFxuLnN1Ym1pdENhbmNlbEJ0bnMge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICAgIG1hcmdpbjogMHB4IDMwcHg7XFxufVxcbi5zdWJtaXRUYXNrLCAuY2FuY2VsU3VibWl0IHtcXG4gICAgcGFkZGluZzogNXB4O1xcbn1cXG5cXG5cXG4vKiBUYXNrIERpc3BsYXkgQXJlYSAqLyBcXG4udGFza0xpc3Qge1xcbiAgICBncmlkLWNvbHVtbjogMjtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgICBib3JkZXI6IDJweCBzb2xpZCByZ2IoMCwgMCwgMCk7XFxuICAgIG1pbi1oZWlnaHQ6IDQxNXB4O1xcbiAgICBoZWlnaHQ6IGZpdC1jb250ZW50O1xcbiAgICB3aWR0aDogNTAwcHg7XFxuICAgIGp1c3RpZnktc2VsZjogcmlnaHQ7XFxuICAgIG1hcmdpbi1sZWZ0OiA5MHB4O1xcbiAgICBvdmVyZmxvdzogYXV0bztcXG4gICAgXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigyMTgsIDIxOCwgMjE4KTtcXG59XFxuXFxuLnRhc2tDYXJkIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgICBtYXJnaW46IDIwcHg7XFxuICAgIGxpc3Qtc3R5bGU6IG5vbmU7XFxufVxcbi5kZWxldGVCdG4ge1xcbiAgICBoZWlnaHQ6IDIwcHg7XFxuICAgIG1pbi13aWR0aDogNTBweDtcXG4gICAgbWFyZ2luLWxlZnQ6IDUwcHg7XFxufVxcbmZvb3RlciB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgICBtYXJnaW4tdG9wOiAzMHB4O1xcbn1cXG4uY29weVJpZ2h0IHtcXG4gICAgbWFyZ2luLXRvcDogN3B4O1xcbiAgICBtYXJnaW4tbGVmdDogMzBweDtcXG59XFxuXFxuQG1lZGlhKG1heC13aWR0aDogMTAwMHB4KSB7XFxuICAgIC5tYWluSGVhZGVyIHtcXG4gICAgICAgIG1hcmdpbi1sZWZ0OiAyMCU7XFxuICAgICAgICBwYWRkaW5nOiAwcHg7XFxuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICAgICAgICBmb250LXNpemU6IDIwcHg7XFxuICAgIH1cXG4gICAgLnRhc2tEaXNwbGF5IHtcXG4gICAgICAgIGRpc3BsYXk6IGdyaWQ7XFxuICAgICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmcjtcXG4gICAgfVxcbiAgICAuYWRkVGFza0Zvcm0ge1xcbiAgICAgICAganVzdGlmeS1zZWxmOiBjZW50ZXI7XFxuICAgICAgICBtYXJnaW46IDBweCAwcHggMjBweCAzJTtcXG4gICAgfVxcbiAgICAudGFza0xpc3Qge1xcbiAgICAgICAganVzdGlmeS1zZWxmOiBjZW50ZXI7XFxuICAgICAgICBtYXgtd2lkdGg6IDcwJTtcXG4gICAgICAgIG1hcmdpbjogMHB4IDI1JSAwcHggMTUlO1xcbiAgICB9XFxuICAgIGZvb3RlciB7XFxuICAgICAgICBtYXJnaW4tbGVmdDogMjAlO1xcbiAgICB9XFxuICAgIC5naXRIdWJMb2dvIHtcXG4gICAgICAgIG1hcmdpbi10b3A6IDBweDtcXG4gICAgfVxcbn1cXG5cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgcmV0dXJuIFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChjb250ZW50LCBcIn1cIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiAobW9kdWxlcywgbWVkaWFRdWVyeSwgZGVkdXBlKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIFwiXCJdXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2ldWzBdO1xuXG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IG1vZHVsZXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19pXSk7XG5cbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udGludWVcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChtZWRpYVF1ZXJ5KSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMl0gPSBcIlwiLmNvbmNhdChtZWRpYVF1ZXJ5LCBcIiBhbmQgXCIpLmNvbmNhdChpdGVtWzJdKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7IHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7IH1cblxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfVxuXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsgdmFyIF9pID0gYXJyID09IG51bGwgPyBudWxsIDogdHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBhcnJbU3ltYm9sLml0ZXJhdG9yXSB8fCBhcnJbXCJAQGl0ZXJhdG9yXCJdOyBpZiAoX2kgPT0gbnVsbCkgcmV0dXJuOyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9zLCBfZTsgdHJ5IHsgZm9yIChfaSA9IF9pLmNhbGwoYXJyKTsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsgfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSkge1xuICB2YXIgX2l0ZW0gPSBfc2xpY2VkVG9BcnJheShpdGVtLCA0KSxcbiAgICAgIGNvbnRlbnQgPSBfaXRlbVsxXSxcbiAgICAgIGNzc01hcHBpbmcgPSBfaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8IFwiXCIpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5Eb20gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRvbS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRvbVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdXG4gICAgfTtcblxuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZXNJbkRvbS5wdXNoKHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogYWRkU3R5bGUob2JqLCBvcHRpb25zKSxcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gYWRkU3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRG9tW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRvbVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRvbS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cblxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcblxuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gIH1cblxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoc3R5bGUsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KHN0eWxlKTtcbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGUpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZSwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBvYmouY3NzO1xuICB2YXIgbWVkaWEgPSBvYmoubWVkaWE7XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChtZWRpYSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZShcIm1lZGlhXCIsIG1lZGlhKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZS5yZW1vdmVBdHRyaWJ1dGUoXCJtZWRpYVwiKTtcbiAgfVxuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZSwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGUpIHtcbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlLmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKHN0eWxlLmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFRvRG8ge1xuICAgIGNvbnN0cnVjdG9yKG5hbWUsIGRlc2NyaXB0aW9uLCBkdWVEYXRlLCBwcmlvcml0eSkge1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gICAgICAgIHRoaXMuZHVlRGF0ZSA9IGR1ZURhdGU7XG4gICAgICAgIHRoaXMucHJpb3JpdHkgPSBwcmlvcml0eTtcbiAgICB9XG4gICAgc2V0TmFtZShuYW1lKSB7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgfVxuICAgIGdldE5hbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5hbWVcbiAgICB9XG4gICAgc2V0RGVzY3JpcHRpb24oZGVzY3JpcHRpb24pIHtcbiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uXG4gICAgfVxuICAgIGdldERlc2NyaXB0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kZXNjcmlwdGlvblxuICAgIH1cbn1cblxuIiwiaW1wb3J0ICcuL0NTUy9zdHlsZS5jc3MnXG5pbXBvcnQgVG9EbyBmcm9tIFwiLi90b19kb1wiO1xuXG5cbmxldCB0YXNrTGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50YXNrTGlzdCcpO1xudGFza0xpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudGFza0xpc3QnKTtcblxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCAoKSA9PiB7XG4gICAgLypmb3IobGV0IGkgaW4gbG9jYWxTdG9yYWdlKSB7XG4gICAgICAgIHRhc2tMaXN0LnRleHRDb250ZW50ID0gbG9jYWxTdG9yYWdlW2ldO1xuICAgIH1cbiAgICAqL1xuICAgKE9iamVjdC5rZXlzKGxvY2FsU3RvcmFnZSkpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgIGxldCBvbGRUYXNrID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICAgICBvbGRUYXNrLmNsYXNzTGlzdC5hZGQoJ3Rhc2tDYXJkJylcbiAgICAgICBsZXQgb2xkVGFza05hbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpXG4gICAgICAgb2xkVGFza05hbWUuY2xhc3NMaXN0LmFkZCgnbmFtZScpXG4gICAgICAgb2xkVGFza05hbWUudGV4dENvbnRlbnQgPSBsb2NhbFN0b3JhZ2Vba2V5XVxuICAgICAgIGxldCBvbGREZWxldGVCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKVxuICAgICAgIG9sZERlbGV0ZUJ0bi5jbGFzc0xpc3QuYWRkKCdkZWxldGVCdG4nKVxuICAgICAgIG9sZERlbGV0ZUJ0bi50ZXh0Q29udGVudCA9ICdYJ1xuICAgICAgIG9sZERlbGV0ZUJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGtleSlcbiAgICAgICAgICAgIG9sZFRhc2suc3R5bGUuZGlzcGxheSA9ICdOb25lJ1xuICAgICAgICB9KVxuICAgICAgIG9sZFRhc2suYXBwZW5kKG9sZFRhc2tOYW1lKVxuICAgICAgIG9sZFRhc2suYXBwZW5kKG9sZERlbGV0ZUJ0bilcbiAgICAgICB0YXNrTGlzdC5hcHBlbmQob2xkVGFzayk7XG4gICB9KVxufSlcblxuY2xhc3MgQ3JlYXRlTGlzdCB7XG4gICAgY29uc3RydWN0b3IocHJvamVjdCwgcHJvamVjdEFycikge1xuICAgICAgICB0aGlzLnByb2plY3QgPSBwcm9qZWN0O1xuICAgICAgICB0aGlzLnByb2plY3RBcnIgPSBwcm9qZWN0QXJyO1xuICAgIH1cbiAgICBhZGRUYXNrKCkge1xuICAgICAgICBsZXQgc3VibWl0QnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnN1Ym1pdFRhc2snKVxuICAgICAgICBzdWJtaXRCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICBsZXQgdGFzayA9IG5ldyBUb0RvO1xuICAgICAgICAgICAvKlxuICAgICAgICAgICAgbGV0IGFjdGl2YXRlRm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hY3RpdmF0ZUZvcm0nKVxuICAgICAgICAgICAgYWN0aXZhdGVGb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBhZGRUYXNrRm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hZGRUYXNrRm9ybScpXG4gICAgICAgICAgICAgICAgYWRkVGFza0Zvcm0uc3R5bGUuZGlzcGxheSA9ICdmbGV4J1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBsZXQgdGFza05hbWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudGFza05hbWUnKVxuICAgICAgICAgICAgdGFzay5zZXROYW1lKHRhc2tOYW1lLnZhbHVlKVxuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oYCR7dGFzay5uYW1lfWAsIGAke3Rhc2submFtZX1gKVxuXG4gICAgICAgICAgICBsZXQgdGFza0NhcmQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgICAgICAgICAgdGFza0NhcmQuY2xhc3NMaXN0LmFkZCgndGFza0NhcmQnKVxuICAgICAgICAgICAgbGV0IG5hbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpXG4gICAgICAgICAgICBuYW1lLmNsYXNzTGlzdC5hZGQoJ25hbWUnKVxuICAgICAgICAgICAgbmFtZS50ZXh0Q29udGVudCA9IHRhc2submFtZVxuXG4gICAgICAgICAgICBsZXQgZGVsZXRlQnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJylcbiAgICAgICAgICAgIGRlbGV0ZUJ0bi5jbGFzc0xpc3QuYWRkKCdkZWxldGVCdG4nKVxuICAgICAgICAgICAgZGVsZXRlQnRuLnRleHRDb250ZW50ID0gJ1gnXG5cbiAgICAgICAgICAgIHRhc2tDYXJkLmFwcGVuZChsb2NhbFN0b3JhZ2UuZ2V0SXRlbSh0YXNrLm5hbWUpKVxuICAgICAgICAgICAgdGFza0NhcmQuYXBwZW5kKGRlbGV0ZUJ0bilcbiAgICAgICAgICAgIHRhc2tMaXN0LmFwcGVuZCh0YXNrQ2FyZClcblxuICAgICAgICAgICAgLy9EZWxldGUgdGFzayBmcm9tIGxvY2FsIHN0b3JhZ2UgYW5kIHRoZSBET01cbiAgICAgICAgICAgIGRlbGV0ZUJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSh0YXNrLm5hbWUpXG4gICAgICAgICAgICAgICAgdGFza0NhcmQuc3R5bGUuZGlzcGxheSA9ICdOb25lJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC8vIFJlc2V0IHRleHRib3ggYWZ0ZXIgc3VibWlzc2lvblxuICAgICAgICAgICAgdGFza05hbWUudmFsdWUgPSAnJztcbiAgICAgICAgICAgXG4gICAgICAgIH0pXG4gICAgfVxufVxubGV0IG5ld1Rhc2sgPSBuZXcgQ3JlYXRlTGlzdFxubmV3VGFzay5hZGRUYXNrKCk7XG4iLCJpbXBvcnQgbG9hZFBhZ2UgZnJvbSBcIi4vbW9kdWxlcy9VSVwiXG5cbmxvYWRQYWdlKCk7XG5cbiJdLCJuYW1lcyI6WyJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsInB1c2giLCJtb2R1bGUiLCJpZCIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwiY29uY2F0Iiwiam9pbiIsImkiLCJtb2R1bGVzIiwibWVkaWFRdWVyeSIsImRlZHVwZSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJsZW5ndGgiLCJfaSIsIl9hcnJheUxpa2VUb0FycmF5IiwiYXJyIiwibGVuIiwiYXJyMiIsIkFycmF5IiwiX2l0ZW0iLCJpc0FycmF5IiwiX2FycmF5V2l0aEhvbGVzIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJfcyIsIl9lIiwiX2FyciIsIl9uIiwiX2QiLCJjYWxsIiwibmV4dCIsImRvbmUiLCJ2YWx1ZSIsImVyciIsIl9pdGVyYWJsZVRvQXJyYXlMaW1pdCIsIm8iLCJtaW5MZW4iLCJuIiwiT2JqZWN0IiwicHJvdG90eXBlIiwic2xpY2UiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJmcm9tIiwidGVzdCIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIlR5cGVFcnJvciIsIl9ub25JdGVyYWJsZVJlc3QiLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290Iiwic3R5bGVzSW5Eb20iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJvcHRpb25zIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXgiLCJvYmoiLCJjc3MiLCJtZWRpYSIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkU3R5bGUiLCJhcGkiLCJkb21BUEkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2luZGV4Iiwic3BsaWNlIiwibWVtbyIsImluc2VydCIsInN0eWxlIiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwiZ2V0VGFyZ2V0IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0U3R5bGVFbGVtZW50IiwicmVtb3ZlQXR0cmlidXRlIiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJhcHBseSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwidW5kZWZpbmVkIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImRlZmluaXRpb24iLCJrZXkiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJwcm9wIiwiaGFzT3duUHJvcGVydHkiLCJyIiwidG9TdHJpbmdUYWciLCJUb0RvIiwiZGVzY3JpcHRpb24iLCJkdWVEYXRlIiwicHJpb3JpdHkiLCJzZXROYW1lIiwiZ2V0TmFtZSIsInNldERlc2NyaXB0aW9uIiwiZ2V0RGVzY3JpcHRpb24iLCJ0YXNrTGlzdCIsImFkZEV2ZW50TGlzdGVuZXIiLCJrZXlzIiwibG9jYWxTdG9yYWdlIiwiZm9yRWFjaCIsIm9sZFRhc2siLCJjbGFzc0xpc3QiLCJhZGQiLCJvbGRUYXNrTmFtZSIsInRleHRDb250ZW50Iiwib2xkRGVsZXRlQnRuIiwicmVtb3ZlSXRlbSIsImRpc3BsYXkiLCJhcHBlbmQiLCJwcm9qZWN0IiwicHJvamVjdEFyciIsImFkZFRhc2siLCJ0YXNrIiwidGFza05hbWUiLCJzZXRJdGVtIiwidGFza0NhcmQiLCJkZWxldGVCdG4iLCJnZXRJdGVtIl0sInNvdXJjZVJvb3QiOiIifQ==